{"version":3,"sources":["assets/images/logo.svg","assets/images/person-navegating.png","components/Loading.jsx","components/Header.jsx","components/Footer.jsx","containers/Img.jsx","actions/loadingAction.js","actions/actionsType.js","pages/Loading.jsx","serviceWorker.js","reducers/index.js","reducers/loadingReducer.js","store/index.js","index.jsx","pages/Home.jsx","javascripts/documentHeight.js"],"names":["module","exports","loading","time","loaded","className","src","Logo","alt","Header","Footer","Img","imgUrl","imgAlt","imgClass","dispatch","useDispatch","onLoad","type","onLoadCapture","defaultProps","items","useSelector","state","loadingItems","useState","setTime","closePage","setClosePage","setloaded","init","setInit","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Boolean","window","location","hostname","match","combineReducers","action","initState","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","path","exact","component","Loading","personNavegating","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","appHeight","documentElement","style","setProperty","innerHeight","addEventListener"],"mappings":"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","file":"static/js/main.2faeda5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1dc29329.svg\";","module.exports = __webpack_public_path__ + \"static/media/person-navegating.fe2bdcf5.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Assets\nimport Logo from '../assets/images/logo.svg';\n\nexport default function loading({ time, loaded }) {\n  return (\n    <div className={`loading-container ${time && loaded ? 'close-loading' : ''}`}>\n      <div className=\"loading-page\">\n        <img src={Logo} alt=\"Logo Img\" className=\"logo-img\" />\n        <div>\n          <h1 className=\"dot one\">.</h1>\n          <h1 className=\"dot two\">.</h1>\n          <h1 className=\"dot three\">.</h1>\n          <h1 className=\"dot fourth\">.</h1>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nloading.propTypes = {\n  loaded: PropTypes.bool.isRequired,\n  time: PropTypes.bool.isRequired,\n};\n","import React from 'react';\n\nexport default function Header() {\n  return (\n    <header>\n        <div className=\"background\">\n          <div className=\"wave first\"></div>\n          <div className=\"wave second\"></div>\n        </div>\n    </header>\n  );\n}","import React from 'react';\n\nexport default function Footer() {\n  return (\n    <footer>\n        {}\n    </footer>\n  );\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\n// Actions\nimport { addItem, removeItem } from '../actions/loadingAction';\n\nexport default function Img({ imgUrl, imgAlt, imgClass }) {\n  const dispatch = useDispatch();\n\n  const loadedHandler = () => {\n    dispatch(removeItem());\n  };\n\n  const loadingHandler = () => {\n    dispatch(addItem());\n  };\n\n  return (\n    <img\n      src={imgUrl}\n      alt={imgAlt}\n      className={imgClass}\n      onLoad={loadedHandler}\n      onLoadCapture={loadingHandler}\n    />\n  );\n}\n\nImg.propTypes = {\n  imgUrl: PropTypes.string.isRequired,\n  imgAlt: PropTypes.string.isRequired,\n  imgClass: PropTypes.string,\n};\n\nImg.defaultProps = {\n  imgClass: null,\n};\n","import * as ActionTypes from './actionsType';\n\nfunction addItem() {\n  return {\n    type: ActionTypes.ADD_LOADING_ITEM,\n  };\n}\n\nfunction removeItem() {\n  return {\n    type: ActionTypes.REMOVE_LOADING_ITEM,\n  };\n}\n\nexport { addItem, removeItem };\n","export const ADD_LOADING_ITEM = 'ADD_LOADING_ITEM';\nexport const REMOVE_LOADING_ITEM = 'REMOVE_LOADING_ITEM';\nexport const GET_LOADING_STAGE = 'GET_LOADING_STAGE';","import React, { useEffect, useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Loading } from '../components';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n    return null;\n  }, [delay]);\n}\n\nexport default () => {\n  const items = useSelector((state) => state.loadingItems);\n  const [time, setTime] = useState(false);\n  const [closePage, setClosePage] = useState(false);\n  const [loaded, setloaded] = useState(false);\n  const [init, setInit] = useState(0);\n\n  const startTimer = () => {\n    setTime(true);\n    setInit(1);\n    if (init === 1 && loaded) {\n      setClosePage(true);\n      setInit(2);\n    }\n  };\n\n  useInterval(() => {\n    startTimer();\n  }, 1000);\n\n  if (items === 0 && !loaded) {\n    setloaded(true);\n  }\n\n  if (loaded && closePage) {\n    return null;\n  }\n\n  return (\n    <Loading time={time} loaded={loaded} />\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport LoadingReducer from './loadingReducer';\n\nexport default combineReducers({\n  loadingItems: LoadingReducer,\n});\n","import * as types from '../actions/actionsType';\n\nexport default (state = '', action) => {\n  switch (action.type) {\n    case types.ADD_LOADING_ITEM:\n      return state + 1;\n    case types.REMOVE_LOADING_ITEM:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n","import { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from '../reducers';\n\nconst initState = {\n  loadingItems: 0,\n};\n\nexport default function configureStore() {\n  const store = createStore(\n    reducers,\n    initState,\n    composeWithDevTools(\n      applyMiddleware(\n        thunk,\n      ),\n    ),\n  );\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport appHeight from './javascripts/documentHeight';\n\n// Components\nimport './components';\nimport { Home } from './pages';\n\n// Assets\nimport './assets/stylesheets/Main.scss';\n\n// Services\nimport * as serviceWorker from './serviceWorker';\nimport storeConfig from './store';\n\nconst store = storeConfig();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n      </Switch>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n// serviceWorker.register();\nappHeight();\n","import React from 'react';\n\n// Components\nimport { Img } from '../containers';\nimport Loading from './Loading';\nimport { Header, Footer } from '../components';\n\n// Assets\nimport personNavegating from '../assets/images/person-navegating.png'\n\nexport default function Home() {\n  return (\n    <>\n      <Loading />\n      <Header />\n      <main className=\"home\">\n        <div className=\"background\">\n          <Img imgAlt=\"Guy Navegating on the World\" imgClass=\"first-img\" imgUrl={personNavegating}></Img>\n        </div>\n        <div className=\"content\">\n          <p className=\"quote\">We know how to do it!</p>\n          <h1>Developing Websites</h1>\n          <p className=\"text\">we design and develop websites with the heights  professional quality, customizing each website to our client's needs</p>\n        </div>\n      </main>\n      <Footer />\n    </>\n  );\n}\n","export default function appHeight() {\n  const doc = document.documentElement;\n  doc.style.setProperty('--app-height', `${window.innerHeight}px`);\n  window.addEventListener('resize', appHeight);\n}\n"],"sourceRoot":""}